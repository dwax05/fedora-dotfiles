
;; Profile vars
(defvar IMAGE "images/profile.png")
(defvar NAME "VIHRUTH THIMMAIAH")
(defpoll UNAME :interval "30m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll TEMP :interval "1s" `scripts/sys_info --temp`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Music vars
(defpoll DAEMON :interval "1s" "playerctl --player spotify status 2>&1")
(deflisten SONG "playerctl --player spotify metadata --format '{{trunc(title, 18)}}' --follow")
(deflisten ARTIST "playerctl --player spotify metadata --format '{{trunc(artist, 25)}}' --follow")
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll WEATHER :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
;; (defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
;; (defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; Files vars
(defpoll FREE :interval "1m" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)
(defpoll FREE_USER :interval "1m" `df -h /home | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)


;; ** Widgets *************************************************************************


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text { NAME })
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(circular-progress :value CPU_USAGE :active "false" :thickness 10 :class "iconcpu" :start-at 0
					(label :class "labelcpu" :text ""))
				(circular-progress :value MEM_USAGE :active "false" :thickness 10 :class "iconmem" :start-at 0
					(label :class "labelmem" :text "")))
			(box :orientation "h" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(circular-progress :value TEMP :active "false" :thickness 10 :class "icontemp" :start-at 0
					(label :class "labeltemp" :text ""))
				(circular-progress :value BATTERY :active "false" :thickness 10 :class "iconbat" :start-at 0
					(label :class "labelbat" :text ""))
				)
			)
		)
	)
;; (label :class "labeltemp" :text "${ TEMP }󰔄"))
;; (label :class "labelcpu" :text "${ CPU_USAGE }%"))
;; (label :class "labelmem" :text "${ MEM_USAGE }%"))
;; (label :class "labelbat" :text "${ BATTERY }%"))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 2
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 2 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "󰄉")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :halign "center" :class "song"  :onclick "scripts/open_apps --sl" :wrap "true" :limit-width 20 { DAEMON != "" ? SONG : "Offline" })
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text { DAEMON != "" ? ARTIST : "" })
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "scripts/music_info --prev" "󰒮")
				(button :class "btn_play" :onclick "scripts/music_info --toggle" { DAEMON == "Playing" ? "" : "" }) ;
				(button :class "btn_next" :onclick "scripts/music_info --next" "󰒭"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onchange "playerctl --player spotify position {}" :min 0 :active "true" :max TTIME :value CURRENT)))))

;; github
(defwidget github [] 
	(box :class "github" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --gh" "")))

;; reddit
(defwidget reddit [] 
	(box :class "reddit" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --rd" "")))

;; whatsapp
(defwidget whatsapp [] 
	(box :class "whatsapp" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --tw" "")))

;; youtube
(defwidget youtube [] 
	(box :class "youtube" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --yt" "")))

;; weather
(defwidget weather [] 
	(box 
		:class "genwin" 
		(box
			:orientation "v"
			:spacing 10 
			:space-evenly "false" 
			:vexpand "false" 
			:hexpand "false" 
			(box 
				:orientation "h"
				:vexpand "false" 
				:hexpand "false"
				:halign "start"
				(label 
					:class "label_temp"
					:halign "start"
					:text WEATHER)
				(label 
					:class "iconweather" 
					:style "color: ${HEX};" 
					:halign "end"
					:text ICON)
			)
			(box 
				:orientation "h" 
				:halign "start"
				:space-evenly "false" 
				:vexpand "false" 
				:hexpand "false" 
				(label 
					:class "label_stat"  
				 	:text STAT)

			)
		)
	)
)

;; apps
(defwidget apps [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/code.png');" :class "app_code" :onclick "scripts/open_apps --cd")
			(button :style "background-image: url('images/icons/firefox.svg');" :class "app_fox" :onclick "scripts/open_apps --ff"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/terminal.svg');" :class "app_terminal" :onclick "scripts/open_apps --tr")
			(button :style "background-image: url('images/icons/files.svg');" :class "app_files" :onclick "scripts/open_apps --fm"))
		(box :class "appbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :style "background-image: url('images/icons/gimp.svg');" :class "app_gimp" :onclick "scripts/open_apps --gp")
			(button :style "background-image: url('images/icons/virtualbox.svg');" :class "app_vbox" :onclick "scripts/open_apps --vb"))))

;; power buttons
(defwidget logout [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :onclick "hyprctl dispatch exit" "󰗽")))
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" "󰤄")))
(defwidget reboot [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :onclick "systemctl reboot" "")))
(defwidget poweroff [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :onclick "systemctl poweroff" "⏻")))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :class "hddicon" :onclick "scripts/open_apps --fm" "󰋊")
				(label :class "fs_sep" :text "|"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" :orientation "v" 
			 (label :class "hdd_label" :wrap "true" :limit-width 15 :text "󰯨")
			 (label :class "hdd_label" :wrap "true" :limit-width 15 :text "󰯤"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" :orientation "v" 
				(label :class "hdd_label" :wrap "true" :limit-width 15 :text FREE_USER)
				(label :class "hdd_label" :wrap "true" :limit-width 15 :text FREE)))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder1" :onclick "scripts/open_folders --docs" "󱧷")
			(button :class "label_folder1" :onclick "scripts/open_folders --docs" "Documents"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder2" :onclick "scripts/open_folders --dl" "󱧩")
			(button :class "label_folder2" :onclick "scripts/open_folders --dl" "Downloads"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder3" :onclick "scripts/open_folders --music" "󱧻")
			(button :class "label_folder3" :onclick "scripts/open_folders --music" "Music"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder4" :onclick "scripts/open_folders --pics" "󱋤")
			(button :class "label_folder4" :onclick "scripts/open_folders --pics" "Pictures"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder5" :onclick "scripts/open_folders --cfg" "󱧽")
			(button :class "label_folder5" :onclick "scripts/open_folders --cfg" "~/.config"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder6" :onclick "scripts/open_folders --local" "󰷎")
			(button :class "label_folder6" :onclick "scripts/open_folders --local" "~/.local"))))


;; Calendar
(defwidget cal []
	(box :class "genwin"
		 :orientation "h"
	(box :class "cal-inner-box"
	(calendar :class "cal"
			  :day calendar_day
			  :month calendar_month
			  :year calendar_year))))
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "date '+%m'")
(defpoll calendar_year :interval "10h" "date '+%Y'")



;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 0 :y 0 :width "1920px" :height "1080px")
		:monitor 0
					(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 150 :width 350 :height 440)
		:monitor 0
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 150 :y 605 :width 350 :height 325)
		:monitor 0
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 150 :width 400 :height 155)
		:monitor 0
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 320 :width 400 :height 160)
		:monitor 0
					(uptime))

;; github
(defwindow github :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 515 :y 785 :width 141 :height 145)
		:monitor 0
					(github))

;; reddit
(defwindow reddit :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 671 :y 785 :width 141 :height 145)
		:monitor 0
					(reddit))

;; whatsapp
(defwindow whatsapp :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 827 :y 785 :width 141 :height 145)
		:monitor 0
					(whatsapp))

;; youtube
(defwindow youtube :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 983 :y 785 :width 142 :height 145)
		:monitor 0
					(youtube))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 930 :y 150 :width 400 :height 250)
		:monitor 0
					(weather))

;; apps
(defwindow apps :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1140 :y 490 :width 220 :height 440)
		:monitor 0
					(apps))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 930 :y 410 :width 85 :height 70)
		:monitor 0
					(logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1035 :y 410 :width 85 :height 70)
		:monitor 0
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1140 :y 410 :width 85 :height 70)
		:monitor 0
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1245 :y 410 :width 85 :height 70)
		:monitor 0
		(poweroff))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 1375 :y 490 :width 395 :height 440)
	:monitor 0
	(folders))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	:geometry (geometry :x 515 :y 490 :width 610 :height 280)
	:monitor 0
	(music))

;; Calendar
(defwindow calendar	:stacking "fg" :focusable false :screen 1
	:geometry (geometry :x 1350 :y 150 :width 420 :height 330)
	:monitor 0 
	(cal))
